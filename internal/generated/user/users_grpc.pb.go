// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v4.25.1
// source: user/users.proto

package user

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	AuthService_RegisterAdmin_FullMethodName     = "/auth.AuthService/RegisterAdmin"
	AuthService_AddUser_FullMethodName           = "/auth.AuthService/AddUser"
	AuthService_GetUser_FullMethodName           = "/auth.AuthService/GetUser"
	AuthService_UpdateUser_FullMethodName        = "/auth.AuthService/UpdateUser"
	AuthService_GetUserList_FullMethodName       = "/auth.AuthService/GetUserList"
	AuthService_DeleteUser_FullMethodName        = "/auth.AuthService/DeleteUser"
	AuthService_LogIn_FullMethodName             = "/auth.AuthService/LogIn"
	AuthService_CreateClient_FullMethodName      = "/auth.AuthService/CreateClient"
	AuthService_GetClient_FullMethodName         = "/auth.AuthService/GetClient"
	AuthService_GetListClient_FullMethodName     = "/auth.AuthService/GetListClient"
	AuthService_UpdateClient_FullMethodName      = "/auth.AuthService/UpdateClient"
	AuthService_DeleteClient_FullMethodName      = "/auth.AuthService/DeleteClient"
	AuthService_CreateSalary_FullMethodName      = "/auth.AuthService/CreateSalary"
	AuthService_UpdateSalary_FullMethodName      = "/auth.AuthService/UpdateSalary"
	AuthService_GetSalaryByID_FullMethodName     = "/auth.AuthService/GetSalaryByID"
	AuthService_ListSalaries_FullMethodName      = "/auth.AuthService/ListSalaries"
	AuthService_CreateAdjustment_FullMethodName  = "/auth.AuthService/CreateAdjustment"
	AuthService_UpdateAdjustment_FullMethodName  = "/auth.AuthService/UpdateAdjustment"
	AuthService_CloseAdjustment_FullMethodName   = "/auth.AuthService/CloseAdjustment"
	AuthService_GetAdjustmentByID_FullMethodName = "/auth.AuthService/GetAdjustmentByID"
	AuthService_ListAdjustments_FullMethodName   = "/auth.AuthService/ListAdjustments"
	AuthService_GetWorkerAllInfo_FullMethodName  = "/auth.AuthService/GetWorkerAllInfo"
)

// AuthServiceClient is the client API for AuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Define the service and its RPC methods
type AuthServiceClient interface {
	RegisterAdmin(ctx context.Context, in *MessageResponse, opts ...grpc.CallOption) (*MessageResponse, error)
	AddUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponse, error)
	GetUser(ctx context.Context, in *UserIDRequest, opts ...grpc.CallOption) (*UserResponse, error)
	UpdateUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponse, error)
	GetUserList(ctx context.Context, in *FilterUserRequest, opts ...grpc.CallOption) (*UserListResponse, error)
	DeleteUser(ctx context.Context, in *UserIDRequest, opts ...grpc.CallOption) (*MessageResponse, error)
	LogIn(ctx context.Context, in *LogInRequest, opts ...grpc.CallOption) (*TokenResponse, error)
	CreateClient(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (*ClientResponse, error)
	GetClient(ctx context.Context, in *UserIDRequest, opts ...grpc.CallOption) (*ClientResponse, error)
	GetListClient(ctx context.Context, in *FilterClientRequest, opts ...grpc.CallOption) (*ClientListResponse, error)
	UpdateClient(ctx context.Context, in *ClientUpdateRequest, opts ...grpc.CallOption) (*ClientResponse, error)
	DeleteClient(ctx context.Context, in *UserIDRequest, opts ...grpc.CallOption) (*MessageResponse, error)
	// Methods for salary
	CreateSalary(ctx context.Context, in *SalaryRequest, opts ...grpc.CallOption) (*SalaryResponse, error)
	UpdateSalary(ctx context.Context, in *SalaryUpdate, opts ...grpc.CallOption) (*SalaryResponse, error)
	GetSalaryByID(ctx context.Context, in *ID, opts ...grpc.CallOption) (*SalaryResponse, error)
	ListSalaries(ctx context.Context, in *GetSalaryRequest, opts ...grpc.CallOption) (*GetSalaryList, error)
	// Methods for Bonuses
	CreateAdjustment(ctx context.Context, in *AdjustmentRequest, opts ...grpc.CallOption) (*AdjustmentResponse, error)
	UpdateAdjustment(ctx context.Context, in *AdjustmentUpdate, opts ...grpc.CallOption) (*AdjustmentResponse, error)
	CloseAdjustment(ctx context.Context, in *ID, opts ...grpc.CallOption) (*AdjustmentResponse, error)
	GetAdjustmentByID(ctx context.Context, in *ID, opts ...grpc.CallOption) (*AdjustmentResponse, error)
	ListAdjustments(ctx context.Context, in *GetAdjustmentRequest, opts ...grpc.CallOption) (*AdjustmentList, error)
	GetWorkerAllInfo(ctx context.Context, in *ID, opts ...grpc.CallOption) (*WorkerAllInfo, error)
}

type authServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthServiceClient(cc grpc.ClientConnInterface) AuthServiceClient {
	return &authServiceClient{cc}
}

func (c *authServiceClient) RegisterAdmin(ctx context.Context, in *MessageResponse, opts ...grpc.CallOption) (*MessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MessageResponse)
	err := c.cc.Invoke(ctx, AuthService_RegisterAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) AddUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, AuthService_AddUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetUser(ctx context.Context, in *UserIDRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, AuthService_GetUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) UpdateUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, AuthService_UpdateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetUserList(ctx context.Context, in *FilterUserRequest, opts ...grpc.CallOption) (*UserListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserListResponse)
	err := c.cc.Invoke(ctx, AuthService_GetUserList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DeleteUser(ctx context.Context, in *UserIDRequest, opts ...grpc.CallOption) (*MessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MessageResponse)
	err := c.cc.Invoke(ctx, AuthService_DeleteUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) LogIn(ctx context.Context, in *LogInRequest, opts ...grpc.CallOption) (*TokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TokenResponse)
	err := c.cc.Invoke(ctx, AuthService_LogIn_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) CreateClient(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (*ClientResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClientResponse)
	err := c.cc.Invoke(ctx, AuthService_CreateClient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetClient(ctx context.Context, in *UserIDRequest, opts ...grpc.CallOption) (*ClientResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClientResponse)
	err := c.cc.Invoke(ctx, AuthService_GetClient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetListClient(ctx context.Context, in *FilterClientRequest, opts ...grpc.CallOption) (*ClientListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClientListResponse)
	err := c.cc.Invoke(ctx, AuthService_GetListClient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) UpdateClient(ctx context.Context, in *ClientUpdateRequest, opts ...grpc.CallOption) (*ClientResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClientResponse)
	err := c.cc.Invoke(ctx, AuthService_UpdateClient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DeleteClient(ctx context.Context, in *UserIDRequest, opts ...grpc.CallOption) (*MessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MessageResponse)
	err := c.cc.Invoke(ctx, AuthService_DeleteClient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) CreateSalary(ctx context.Context, in *SalaryRequest, opts ...grpc.CallOption) (*SalaryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalaryResponse)
	err := c.cc.Invoke(ctx, AuthService_CreateSalary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) UpdateSalary(ctx context.Context, in *SalaryUpdate, opts ...grpc.CallOption) (*SalaryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalaryResponse)
	err := c.cc.Invoke(ctx, AuthService_UpdateSalary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetSalaryByID(ctx context.Context, in *ID, opts ...grpc.CallOption) (*SalaryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalaryResponse)
	err := c.cc.Invoke(ctx, AuthService_GetSalaryByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ListSalaries(ctx context.Context, in *GetSalaryRequest, opts ...grpc.CallOption) (*GetSalaryList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSalaryList)
	err := c.cc.Invoke(ctx, AuthService_ListSalaries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) CreateAdjustment(ctx context.Context, in *AdjustmentRequest, opts ...grpc.CallOption) (*AdjustmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AdjustmentResponse)
	err := c.cc.Invoke(ctx, AuthService_CreateAdjustment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) UpdateAdjustment(ctx context.Context, in *AdjustmentUpdate, opts ...grpc.CallOption) (*AdjustmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AdjustmentResponse)
	err := c.cc.Invoke(ctx, AuthService_UpdateAdjustment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) CloseAdjustment(ctx context.Context, in *ID, opts ...grpc.CallOption) (*AdjustmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AdjustmentResponse)
	err := c.cc.Invoke(ctx, AuthService_CloseAdjustment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetAdjustmentByID(ctx context.Context, in *ID, opts ...grpc.CallOption) (*AdjustmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AdjustmentResponse)
	err := c.cc.Invoke(ctx, AuthService_GetAdjustmentByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ListAdjustments(ctx context.Context, in *GetAdjustmentRequest, opts ...grpc.CallOption) (*AdjustmentList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AdjustmentList)
	err := c.cc.Invoke(ctx, AuthService_ListAdjustments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetWorkerAllInfo(ctx context.Context, in *ID, opts ...grpc.CallOption) (*WorkerAllInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WorkerAllInfo)
	err := c.cc.Invoke(ctx, AuthService_GetWorkerAllInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServiceServer is the server API for AuthService service.
// All implementations must embed UnimplementedAuthServiceServer
// for forward compatibility
//
// Define the service and its RPC methods
type AuthServiceServer interface {
	RegisterAdmin(context.Context, *MessageResponse) (*MessageResponse, error)
	AddUser(context.Context, *UserRequest) (*UserResponse, error)
	GetUser(context.Context, *UserIDRequest) (*UserResponse, error)
	UpdateUser(context.Context, *UserRequest) (*UserResponse, error)
	GetUserList(context.Context, *FilterUserRequest) (*UserListResponse, error)
	DeleteUser(context.Context, *UserIDRequest) (*MessageResponse, error)
	LogIn(context.Context, *LogInRequest) (*TokenResponse, error)
	CreateClient(context.Context, *ClientRequest) (*ClientResponse, error)
	GetClient(context.Context, *UserIDRequest) (*ClientResponse, error)
	GetListClient(context.Context, *FilterClientRequest) (*ClientListResponse, error)
	UpdateClient(context.Context, *ClientUpdateRequest) (*ClientResponse, error)
	DeleteClient(context.Context, *UserIDRequest) (*MessageResponse, error)
	// Methods for salary
	CreateSalary(context.Context, *SalaryRequest) (*SalaryResponse, error)
	UpdateSalary(context.Context, *SalaryUpdate) (*SalaryResponse, error)
	GetSalaryByID(context.Context, *ID) (*SalaryResponse, error)
	ListSalaries(context.Context, *GetSalaryRequest) (*GetSalaryList, error)
	// Methods for Bonuses
	CreateAdjustment(context.Context, *AdjustmentRequest) (*AdjustmentResponse, error)
	UpdateAdjustment(context.Context, *AdjustmentUpdate) (*AdjustmentResponse, error)
	CloseAdjustment(context.Context, *ID) (*AdjustmentResponse, error)
	GetAdjustmentByID(context.Context, *ID) (*AdjustmentResponse, error)
	ListAdjustments(context.Context, *GetAdjustmentRequest) (*AdjustmentList, error)
	GetWorkerAllInfo(context.Context, *ID) (*WorkerAllInfo, error)
	mustEmbedUnimplementedAuthServiceServer()
}

// UnimplementedAuthServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAuthServiceServer struct {
}

func (UnimplementedAuthServiceServer) RegisterAdmin(context.Context, *MessageResponse) (*MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterAdmin not implemented")
}
func (UnimplementedAuthServiceServer) AddUser(context.Context, *UserRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUser not implemented")
}
func (UnimplementedAuthServiceServer) GetUser(context.Context, *UserIDRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedAuthServiceServer) UpdateUser(context.Context, *UserRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedAuthServiceServer) GetUserList(context.Context, *FilterUserRequest) (*UserListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserList not implemented")
}
func (UnimplementedAuthServiceServer) DeleteUser(context.Context, *UserIDRequest) (*MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedAuthServiceServer) LogIn(context.Context, *LogInRequest) (*TokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogIn not implemented")
}
func (UnimplementedAuthServiceServer) CreateClient(context.Context, *ClientRequest) (*ClientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateClient not implemented")
}
func (UnimplementedAuthServiceServer) GetClient(context.Context, *UserIDRequest) (*ClientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClient not implemented")
}
func (UnimplementedAuthServiceServer) GetListClient(context.Context, *FilterClientRequest) (*ClientListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListClient not implemented")
}
func (UnimplementedAuthServiceServer) UpdateClient(context.Context, *ClientUpdateRequest) (*ClientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateClient not implemented")
}
func (UnimplementedAuthServiceServer) DeleteClient(context.Context, *UserIDRequest) (*MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteClient not implemented")
}
func (UnimplementedAuthServiceServer) CreateSalary(context.Context, *SalaryRequest) (*SalaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSalary not implemented")
}
func (UnimplementedAuthServiceServer) UpdateSalary(context.Context, *SalaryUpdate) (*SalaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSalary not implemented")
}
func (UnimplementedAuthServiceServer) GetSalaryByID(context.Context, *ID) (*SalaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSalaryByID not implemented")
}
func (UnimplementedAuthServiceServer) ListSalaries(context.Context, *GetSalaryRequest) (*GetSalaryList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSalaries not implemented")
}
func (UnimplementedAuthServiceServer) CreateAdjustment(context.Context, *AdjustmentRequest) (*AdjustmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAdjustment not implemented")
}
func (UnimplementedAuthServiceServer) UpdateAdjustment(context.Context, *AdjustmentUpdate) (*AdjustmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAdjustment not implemented")
}
func (UnimplementedAuthServiceServer) CloseAdjustment(context.Context, *ID) (*AdjustmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseAdjustment not implemented")
}
func (UnimplementedAuthServiceServer) GetAdjustmentByID(context.Context, *ID) (*AdjustmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAdjustmentByID not implemented")
}
func (UnimplementedAuthServiceServer) ListAdjustments(context.Context, *GetAdjustmentRequest) (*AdjustmentList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAdjustments not implemented")
}
func (UnimplementedAuthServiceServer) GetWorkerAllInfo(context.Context, *ID) (*WorkerAllInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkerAllInfo not implemented")
}
func (UnimplementedAuthServiceServer) mustEmbedUnimplementedAuthServiceServer() {}

// UnsafeAuthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServiceServer will
// result in compilation errors.
type UnsafeAuthServiceServer interface {
	mustEmbedUnimplementedAuthServiceServer()
}

func RegisterAuthServiceServer(s grpc.ServiceRegistrar, srv AuthServiceServer) {
	s.RegisterService(&AuthService_ServiceDesc, srv)
}

func _AuthService_RegisterAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).RegisterAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_RegisterAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).RegisterAdmin(ctx, req.(*MessageResponse))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_AddUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).AddUser(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetUser(ctx, req.(*UserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).UpdateUser(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetUserList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetUserList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetUserList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetUserList(ctx, req.(*FilterUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_DeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DeleteUser(ctx, req.(*UserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_LogIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).LogIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_LogIn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).LogIn(ctx, req.(*LogInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_CreateClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).CreateClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_CreateClient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).CreateClient(ctx, req.(*ClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetClient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetClient(ctx, req.(*UserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetListClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetListClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetListClient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetListClient(ctx, req.(*FilterClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_UpdateClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).UpdateClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_UpdateClient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).UpdateClient(ctx, req.(*ClientUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DeleteClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DeleteClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_DeleteClient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DeleteClient(ctx, req.(*UserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_CreateSalary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SalaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).CreateSalary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_CreateSalary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).CreateSalary(ctx, req.(*SalaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_UpdateSalary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SalaryUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).UpdateSalary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_UpdateSalary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).UpdateSalary(ctx, req.(*SalaryUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetSalaryByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetSalaryByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetSalaryByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetSalaryByID(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ListSalaries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSalaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ListSalaries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_ListSalaries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ListSalaries(ctx, req.(*GetSalaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_CreateAdjustment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdjustmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).CreateAdjustment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_CreateAdjustment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).CreateAdjustment(ctx, req.(*AdjustmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_UpdateAdjustment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdjustmentUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).UpdateAdjustment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_UpdateAdjustment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).UpdateAdjustment(ctx, req.(*AdjustmentUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_CloseAdjustment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).CloseAdjustment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_CloseAdjustment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).CloseAdjustment(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetAdjustmentByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetAdjustmentByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetAdjustmentByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetAdjustmentByID(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ListAdjustments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAdjustmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ListAdjustments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_ListAdjustments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ListAdjustments(ctx, req.(*GetAdjustmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetWorkerAllInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetWorkerAllInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetWorkerAllInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetWorkerAllInfo(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthService_ServiceDesc is the grpc.ServiceDesc for AuthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.AuthService",
	HandlerType: (*AuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterAdmin",
			Handler:    _AuthService_RegisterAdmin_Handler,
		},
		{
			MethodName: "AddUser",
			Handler:    _AuthService_AddUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _AuthService_GetUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _AuthService_UpdateUser_Handler,
		},
		{
			MethodName: "GetUserList",
			Handler:    _AuthService_GetUserList_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _AuthService_DeleteUser_Handler,
		},
		{
			MethodName: "LogIn",
			Handler:    _AuthService_LogIn_Handler,
		},
		{
			MethodName: "CreateClient",
			Handler:    _AuthService_CreateClient_Handler,
		},
		{
			MethodName: "GetClient",
			Handler:    _AuthService_GetClient_Handler,
		},
		{
			MethodName: "GetListClient",
			Handler:    _AuthService_GetListClient_Handler,
		},
		{
			MethodName: "UpdateClient",
			Handler:    _AuthService_UpdateClient_Handler,
		},
		{
			MethodName: "DeleteClient",
			Handler:    _AuthService_DeleteClient_Handler,
		},
		{
			MethodName: "CreateSalary",
			Handler:    _AuthService_CreateSalary_Handler,
		},
		{
			MethodName: "UpdateSalary",
			Handler:    _AuthService_UpdateSalary_Handler,
		},
		{
			MethodName: "GetSalaryByID",
			Handler:    _AuthService_GetSalaryByID_Handler,
		},
		{
			MethodName: "ListSalaries",
			Handler:    _AuthService_ListSalaries_Handler,
		},
		{
			MethodName: "CreateAdjustment",
			Handler:    _AuthService_CreateAdjustment_Handler,
		},
		{
			MethodName: "UpdateAdjustment",
			Handler:    _AuthService_UpdateAdjustment_Handler,
		},
		{
			MethodName: "CloseAdjustment",
			Handler:    _AuthService_CloseAdjustment_Handler,
		},
		{
			MethodName: "GetAdjustmentByID",
			Handler:    _AuthService_GetAdjustmentByID_Handler,
		},
		{
			MethodName: "ListAdjustments",
			Handler:    _AuthService_ListAdjustments_Handler,
		},
		{
			MethodName: "GetWorkerAllInfo",
			Handler:    _AuthService_GetWorkerAllInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user/users.proto",
}
