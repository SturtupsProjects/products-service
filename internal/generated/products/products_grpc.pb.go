// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v4.25.1
// source: products/products.proto

package products

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Products_CreateCategory_FullMethodName           = "/products.Products/CreateCategory"
	Products_UpdateCategory_FullMethodName           = "/products.Products/UpdateCategory"
	Products_DeleteCategory_FullMethodName           = "/products.Products/DeleteCategory"
	Products_GetCategory_FullMethodName              = "/products.Products/GetCategory"
	Products_GetListCategory_FullMethodName          = "/products.Products/GetListCategory"
	Products_CreateProduct_FullMethodName            = "/products.Products/CreateProduct"
	Products_UpdateProduct_FullMethodName            = "/products.Products/UpdateProduct"
	Products_DeleteProduct_FullMethodName            = "/products.Products/DeleteProduct"
	Products_GetProduct_FullMethodName               = "/products.Products/GetProduct"
	Products_GetProductList_FullMethodName           = "/products.Products/GetProductList"
	Products_CreatePurchase_FullMethodName           = "/products.Products/CreatePurchase"
	Products_GetPurchase_FullMethodName              = "/products.Products/GetPurchase"
	Products_GetListPurchase_FullMethodName          = "/products.Products/GetListPurchase"
	Products_UpdatePurchase_FullMethodName           = "/products.Products/UpdatePurchase"
	Products_DeletePurchase_FullMethodName           = "/products.Products/DeletePurchase"
	Products_CalculateTotalSales_FullMethodName      = "/products.Products/CalculateTotalSales"
	Products_CreateSales_FullMethodName              = "/products.Products/CreateSales"
	Products_UpdateSales_FullMethodName              = "/products.Products/UpdateSales"
	Products_GetSales_FullMethodName                 = "/products.Products/GetSales"
	Products_GetListSales_FullMethodName             = "/products.Products/GetListSales"
	Products_DeleteSales_FullMethodName              = "/products.Products/DeleteSales"
	Products_TotalPriceOfProducts_FullMethodName     = "/products.Products/TotalPriceOfProducts"
	Products_TotalSoldProducts_FullMethodName        = "/products.Products/TotalSoldProducts"
	Products_TotalPurchaseProducts_FullMethodName    = "/products.Products/TotalPurchaseProducts"
	Products_GetMostSoldProductsByDay_FullMethodName = "/products.Products/GetMostSoldProductsByDay"
	Products_GetTopClients_FullMethodName            = "/products.Products/GetTopClients"
	Products_GetTopSuppliers_FullMethodName          = "/products.Products/GetTopSuppliers"
)

// ProductsClient is the client API for Products service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// -------------------- Services ---------------------------------
type ProductsClient interface {
	// ------------ Product Category ----------------------------
	CreateCategory(ctx context.Context, in *CreateCategoryRequest, opts ...grpc.CallOption) (*Category, error)
	UpdateCategory(ctx context.Context, in *UpdateCategoryRequest, opts ...grpc.CallOption) (*Category, error)
	DeleteCategory(ctx context.Context, in *GetCategoryRequest, opts ...grpc.CallOption) (*Message, error)
	GetCategory(ctx context.Context, in *GetCategoryRequest, opts ...grpc.CallOption) (*Category, error)
	GetListCategory(ctx context.Context, in *CategoryName, opts ...grpc.CallOption) (*CategoryList, error)
	// ------------- Products -----------------------------------
	CreateProduct(ctx context.Context, in *CreateProductRequest, opts ...grpc.CallOption) (*Product, error)
	UpdateProduct(ctx context.Context, in *UpdateProductRequest, opts ...grpc.CallOption) (*Product, error)
	DeleteProduct(ctx context.Context, in *GetProductRequest, opts ...grpc.CallOption) (*Message, error)
	GetProduct(ctx context.Context, in *GetProductRequest, opts ...grpc.CallOption) (*Product, error)
	GetProductList(ctx context.Context, in *ProductFilter, opts ...grpc.CallOption) (*ProductList, error)
	// -------------- Purchases ---------------------------------
	CreatePurchase(ctx context.Context, in *PurchaseRequest, opts ...grpc.CallOption) (*PurchaseResponse, error)
	GetPurchase(ctx context.Context, in *PurchaseID, opts ...grpc.CallOption) (*PurchaseResponse, error)
	GetListPurchase(ctx context.Context, in *FilterPurchase, opts ...grpc.CallOption) (*PurchaseList, error)
	UpdatePurchase(ctx context.Context, in *PurchaseUpdate, opts ...grpc.CallOption) (*PurchaseResponse, error)
	DeletePurchase(ctx context.Context, in *PurchaseID, opts ...grpc.CallOption) (*Message, error)
	// ------------------ Sales ---------------------------------
	CalculateTotalSales(ctx context.Context, in *SaleRequest, opts ...grpc.CallOption) (*SaleResponse, error)
	CreateSales(ctx context.Context, in *SaleRequest, opts ...grpc.CallOption) (*SaleResponse, error)
	UpdateSales(ctx context.Context, in *SaleUpdate, opts ...grpc.CallOption) (*SaleResponse, error)
	GetSales(ctx context.Context, in *SaleID, opts ...grpc.CallOption) (*SaleResponse, error)
	GetListSales(ctx context.Context, in *SaleFilter, opts ...grpc.CallOption) (*SaleList, error)
	DeleteSales(ctx context.Context, in *SaleID, opts ...grpc.CallOption) (*Message, error)
	// ------------------- statistics --------------------------
	TotalPriceOfProducts(ctx context.Context, in *CompanyID, opts ...grpc.CallOption) (*PriceProducts, error)
	TotalSoldProducts(ctx context.Context, in *CompanyID, opts ...grpc.CallOption) (*PriceProducts, error)
	TotalPurchaseProducts(ctx context.Context, in *CompanyID, opts ...grpc.CallOption) (*PriceProducts, error)
	GetMostSoldProductsByDay(ctx context.Context, in *MostSoldProductsRequest, opts ...grpc.CallOption) (*MostSoldProductsResponse, error)
	GetTopClients(ctx context.Context, in *GetTopEntitiesRequest, opts ...grpc.CallOption) (*GetTopEntitiesResponse, error)
	GetTopSuppliers(ctx context.Context, in *GetTopEntitiesRequest, opts ...grpc.CallOption) (*GetTopEntitiesResponse, error)
}

type productsClient struct {
	cc grpc.ClientConnInterface
}

func NewProductsClient(cc grpc.ClientConnInterface) ProductsClient {
	return &productsClient{cc}
}

func (c *productsClient) CreateCategory(ctx context.Context, in *CreateCategoryRequest, opts ...grpc.CallOption) (*Category, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Category)
	err := c.cc.Invoke(ctx, Products_CreateCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productsClient) UpdateCategory(ctx context.Context, in *UpdateCategoryRequest, opts ...grpc.CallOption) (*Category, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Category)
	err := c.cc.Invoke(ctx, Products_UpdateCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productsClient) DeleteCategory(ctx context.Context, in *GetCategoryRequest, opts ...grpc.CallOption) (*Message, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Message)
	err := c.cc.Invoke(ctx, Products_DeleteCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productsClient) GetCategory(ctx context.Context, in *GetCategoryRequest, opts ...grpc.CallOption) (*Category, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Category)
	err := c.cc.Invoke(ctx, Products_GetCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productsClient) GetListCategory(ctx context.Context, in *CategoryName, opts ...grpc.CallOption) (*CategoryList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CategoryList)
	err := c.cc.Invoke(ctx, Products_GetListCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productsClient) CreateProduct(ctx context.Context, in *CreateProductRequest, opts ...grpc.CallOption) (*Product, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Product)
	err := c.cc.Invoke(ctx, Products_CreateProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productsClient) UpdateProduct(ctx context.Context, in *UpdateProductRequest, opts ...grpc.CallOption) (*Product, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Product)
	err := c.cc.Invoke(ctx, Products_UpdateProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productsClient) DeleteProduct(ctx context.Context, in *GetProductRequest, opts ...grpc.CallOption) (*Message, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Message)
	err := c.cc.Invoke(ctx, Products_DeleteProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productsClient) GetProduct(ctx context.Context, in *GetProductRequest, opts ...grpc.CallOption) (*Product, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Product)
	err := c.cc.Invoke(ctx, Products_GetProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productsClient) GetProductList(ctx context.Context, in *ProductFilter, opts ...grpc.CallOption) (*ProductList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductList)
	err := c.cc.Invoke(ctx, Products_GetProductList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productsClient) CreatePurchase(ctx context.Context, in *PurchaseRequest, opts ...grpc.CallOption) (*PurchaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchaseResponse)
	err := c.cc.Invoke(ctx, Products_CreatePurchase_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productsClient) GetPurchase(ctx context.Context, in *PurchaseID, opts ...grpc.CallOption) (*PurchaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchaseResponse)
	err := c.cc.Invoke(ctx, Products_GetPurchase_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productsClient) GetListPurchase(ctx context.Context, in *FilterPurchase, opts ...grpc.CallOption) (*PurchaseList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchaseList)
	err := c.cc.Invoke(ctx, Products_GetListPurchase_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productsClient) UpdatePurchase(ctx context.Context, in *PurchaseUpdate, opts ...grpc.CallOption) (*PurchaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchaseResponse)
	err := c.cc.Invoke(ctx, Products_UpdatePurchase_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productsClient) DeletePurchase(ctx context.Context, in *PurchaseID, opts ...grpc.CallOption) (*Message, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Message)
	err := c.cc.Invoke(ctx, Products_DeletePurchase_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productsClient) CalculateTotalSales(ctx context.Context, in *SaleRequest, opts ...grpc.CallOption) (*SaleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SaleResponse)
	err := c.cc.Invoke(ctx, Products_CalculateTotalSales_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productsClient) CreateSales(ctx context.Context, in *SaleRequest, opts ...grpc.CallOption) (*SaleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SaleResponse)
	err := c.cc.Invoke(ctx, Products_CreateSales_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productsClient) UpdateSales(ctx context.Context, in *SaleUpdate, opts ...grpc.CallOption) (*SaleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SaleResponse)
	err := c.cc.Invoke(ctx, Products_UpdateSales_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productsClient) GetSales(ctx context.Context, in *SaleID, opts ...grpc.CallOption) (*SaleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SaleResponse)
	err := c.cc.Invoke(ctx, Products_GetSales_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productsClient) GetListSales(ctx context.Context, in *SaleFilter, opts ...grpc.CallOption) (*SaleList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SaleList)
	err := c.cc.Invoke(ctx, Products_GetListSales_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productsClient) DeleteSales(ctx context.Context, in *SaleID, opts ...grpc.CallOption) (*Message, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Message)
	err := c.cc.Invoke(ctx, Products_DeleteSales_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productsClient) TotalPriceOfProducts(ctx context.Context, in *CompanyID, opts ...grpc.CallOption) (*PriceProducts, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PriceProducts)
	err := c.cc.Invoke(ctx, Products_TotalPriceOfProducts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productsClient) TotalSoldProducts(ctx context.Context, in *CompanyID, opts ...grpc.CallOption) (*PriceProducts, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PriceProducts)
	err := c.cc.Invoke(ctx, Products_TotalSoldProducts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productsClient) TotalPurchaseProducts(ctx context.Context, in *CompanyID, opts ...grpc.CallOption) (*PriceProducts, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PriceProducts)
	err := c.cc.Invoke(ctx, Products_TotalPurchaseProducts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productsClient) GetMostSoldProductsByDay(ctx context.Context, in *MostSoldProductsRequest, opts ...grpc.CallOption) (*MostSoldProductsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MostSoldProductsResponse)
	err := c.cc.Invoke(ctx, Products_GetMostSoldProductsByDay_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productsClient) GetTopClients(ctx context.Context, in *GetTopEntitiesRequest, opts ...grpc.CallOption) (*GetTopEntitiesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTopEntitiesResponse)
	err := c.cc.Invoke(ctx, Products_GetTopClients_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productsClient) GetTopSuppliers(ctx context.Context, in *GetTopEntitiesRequest, opts ...grpc.CallOption) (*GetTopEntitiesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTopEntitiesResponse)
	err := c.cc.Invoke(ctx, Products_GetTopSuppliers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductsServer is the server API for Products service.
// All implementations must embed UnimplementedProductsServer
// for forward compatibility
//
// -------------------- Services ---------------------------------
type ProductsServer interface {
	// ------------ Product Category ----------------------------
	CreateCategory(context.Context, *CreateCategoryRequest) (*Category, error)
	UpdateCategory(context.Context, *UpdateCategoryRequest) (*Category, error)
	DeleteCategory(context.Context, *GetCategoryRequest) (*Message, error)
	GetCategory(context.Context, *GetCategoryRequest) (*Category, error)
	GetListCategory(context.Context, *CategoryName) (*CategoryList, error)
	// ------------- Products -----------------------------------
	CreateProduct(context.Context, *CreateProductRequest) (*Product, error)
	UpdateProduct(context.Context, *UpdateProductRequest) (*Product, error)
	DeleteProduct(context.Context, *GetProductRequest) (*Message, error)
	GetProduct(context.Context, *GetProductRequest) (*Product, error)
	GetProductList(context.Context, *ProductFilter) (*ProductList, error)
	// -------------- Purchases ---------------------------------
	CreatePurchase(context.Context, *PurchaseRequest) (*PurchaseResponse, error)
	GetPurchase(context.Context, *PurchaseID) (*PurchaseResponse, error)
	GetListPurchase(context.Context, *FilterPurchase) (*PurchaseList, error)
	UpdatePurchase(context.Context, *PurchaseUpdate) (*PurchaseResponse, error)
	DeletePurchase(context.Context, *PurchaseID) (*Message, error)
	// ------------------ Sales ---------------------------------
	CalculateTotalSales(context.Context, *SaleRequest) (*SaleResponse, error)
	CreateSales(context.Context, *SaleRequest) (*SaleResponse, error)
	UpdateSales(context.Context, *SaleUpdate) (*SaleResponse, error)
	GetSales(context.Context, *SaleID) (*SaleResponse, error)
	GetListSales(context.Context, *SaleFilter) (*SaleList, error)
	DeleteSales(context.Context, *SaleID) (*Message, error)
	// ------------------- statistics --------------------------
	TotalPriceOfProducts(context.Context, *CompanyID) (*PriceProducts, error)
	TotalSoldProducts(context.Context, *CompanyID) (*PriceProducts, error)
	TotalPurchaseProducts(context.Context, *CompanyID) (*PriceProducts, error)
	GetMostSoldProductsByDay(context.Context, *MostSoldProductsRequest) (*MostSoldProductsResponse, error)
	GetTopClients(context.Context, *GetTopEntitiesRequest) (*GetTopEntitiesResponse, error)
	GetTopSuppliers(context.Context, *GetTopEntitiesRequest) (*GetTopEntitiesResponse, error)
	mustEmbedUnimplementedProductsServer()
}

// UnimplementedProductsServer must be embedded to have forward compatible implementations.
type UnimplementedProductsServer struct {
}

func (UnimplementedProductsServer) CreateCategory(context.Context, *CreateCategoryRequest) (*Category, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCategory not implemented")
}
func (UnimplementedProductsServer) UpdateCategory(context.Context, *UpdateCategoryRequest) (*Category, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCategory not implemented")
}
func (UnimplementedProductsServer) DeleteCategory(context.Context, *GetCategoryRequest) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCategory not implemented")
}
func (UnimplementedProductsServer) GetCategory(context.Context, *GetCategoryRequest) (*Category, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategory not implemented")
}
func (UnimplementedProductsServer) GetListCategory(context.Context, *CategoryName) (*CategoryList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListCategory not implemented")
}
func (UnimplementedProductsServer) CreateProduct(context.Context, *CreateProductRequest) (*Product, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProduct not implemented")
}
func (UnimplementedProductsServer) UpdateProduct(context.Context, *UpdateProductRequest) (*Product, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProduct not implemented")
}
func (UnimplementedProductsServer) DeleteProduct(context.Context, *GetProductRequest) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProduct not implemented")
}
func (UnimplementedProductsServer) GetProduct(context.Context, *GetProductRequest) (*Product, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProduct not implemented")
}
func (UnimplementedProductsServer) GetProductList(context.Context, *ProductFilter) (*ProductList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductList not implemented")
}
func (UnimplementedProductsServer) CreatePurchase(context.Context, *PurchaseRequest) (*PurchaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePurchase not implemented")
}
func (UnimplementedProductsServer) GetPurchase(context.Context, *PurchaseID) (*PurchaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPurchase not implemented")
}
func (UnimplementedProductsServer) GetListPurchase(context.Context, *FilterPurchase) (*PurchaseList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListPurchase not implemented")
}
func (UnimplementedProductsServer) UpdatePurchase(context.Context, *PurchaseUpdate) (*PurchaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePurchase not implemented")
}
func (UnimplementedProductsServer) DeletePurchase(context.Context, *PurchaseID) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePurchase not implemented")
}
func (UnimplementedProductsServer) CalculateTotalSales(context.Context, *SaleRequest) (*SaleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateTotalSales not implemented")
}
func (UnimplementedProductsServer) CreateSales(context.Context, *SaleRequest) (*SaleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSales not implemented")
}
func (UnimplementedProductsServer) UpdateSales(context.Context, *SaleUpdate) (*SaleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSales not implemented")
}
func (UnimplementedProductsServer) GetSales(context.Context, *SaleID) (*SaleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSales not implemented")
}
func (UnimplementedProductsServer) GetListSales(context.Context, *SaleFilter) (*SaleList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListSales not implemented")
}
func (UnimplementedProductsServer) DeleteSales(context.Context, *SaleID) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSales not implemented")
}
func (UnimplementedProductsServer) TotalPriceOfProducts(context.Context, *CompanyID) (*PriceProducts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TotalPriceOfProducts not implemented")
}
func (UnimplementedProductsServer) TotalSoldProducts(context.Context, *CompanyID) (*PriceProducts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TotalSoldProducts not implemented")
}
func (UnimplementedProductsServer) TotalPurchaseProducts(context.Context, *CompanyID) (*PriceProducts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TotalPurchaseProducts not implemented")
}
func (UnimplementedProductsServer) GetMostSoldProductsByDay(context.Context, *MostSoldProductsRequest) (*MostSoldProductsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMostSoldProductsByDay not implemented")
}
func (UnimplementedProductsServer) GetTopClients(context.Context, *GetTopEntitiesRequest) (*GetTopEntitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopClients not implemented")
}
func (UnimplementedProductsServer) GetTopSuppliers(context.Context, *GetTopEntitiesRequest) (*GetTopEntitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopSuppliers not implemented")
}
func (UnimplementedProductsServer) mustEmbedUnimplementedProductsServer() {}

// UnsafeProductsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductsServer will
// result in compilation errors.
type UnsafeProductsServer interface {
	mustEmbedUnimplementedProductsServer()
}

func RegisterProductsServer(s grpc.ServiceRegistrar, srv ProductsServer) {
	s.RegisterService(&Products_ServiceDesc, srv)
}

func _Products_CreateCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductsServer).CreateCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Products_CreateCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductsServer).CreateCategory(ctx, req.(*CreateCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Products_UpdateCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductsServer).UpdateCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Products_UpdateCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductsServer).UpdateCategory(ctx, req.(*UpdateCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Products_DeleteCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductsServer).DeleteCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Products_DeleteCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductsServer).DeleteCategory(ctx, req.(*GetCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Products_GetCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductsServer).GetCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Products_GetCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductsServer).GetCategory(ctx, req.(*GetCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Products_GetListCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoryName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductsServer).GetListCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Products_GetListCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductsServer).GetListCategory(ctx, req.(*CategoryName))
	}
	return interceptor(ctx, in, info, handler)
}

func _Products_CreateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductsServer).CreateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Products_CreateProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductsServer).CreateProduct(ctx, req.(*CreateProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Products_UpdateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductsServer).UpdateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Products_UpdateProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductsServer).UpdateProduct(ctx, req.(*UpdateProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Products_DeleteProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductsServer).DeleteProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Products_DeleteProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductsServer).DeleteProduct(ctx, req.(*GetProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Products_GetProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductsServer).GetProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Products_GetProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductsServer).GetProduct(ctx, req.(*GetProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Products_GetProductList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductsServer).GetProductList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Products_GetProductList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductsServer).GetProductList(ctx, req.(*ProductFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _Products_CreatePurchase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PurchaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductsServer).CreatePurchase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Products_CreatePurchase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductsServer).CreatePurchase(ctx, req.(*PurchaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Products_GetPurchase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PurchaseID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductsServer).GetPurchase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Products_GetPurchase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductsServer).GetPurchase(ctx, req.(*PurchaseID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Products_GetListPurchase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterPurchase)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductsServer).GetListPurchase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Products_GetListPurchase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductsServer).GetListPurchase(ctx, req.(*FilterPurchase))
	}
	return interceptor(ctx, in, info, handler)
}

func _Products_UpdatePurchase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PurchaseUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductsServer).UpdatePurchase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Products_UpdatePurchase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductsServer).UpdatePurchase(ctx, req.(*PurchaseUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Products_DeletePurchase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PurchaseID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductsServer).DeletePurchase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Products_DeletePurchase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductsServer).DeletePurchase(ctx, req.(*PurchaseID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Products_CalculateTotalSales_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductsServer).CalculateTotalSales(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Products_CalculateTotalSales_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductsServer).CalculateTotalSales(ctx, req.(*SaleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Products_CreateSales_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductsServer).CreateSales(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Products_CreateSales_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductsServer).CreateSales(ctx, req.(*SaleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Products_UpdateSales_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaleUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductsServer).UpdateSales(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Products_UpdateSales_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductsServer).UpdateSales(ctx, req.(*SaleUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Products_GetSales_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaleID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductsServer).GetSales(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Products_GetSales_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductsServer).GetSales(ctx, req.(*SaleID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Products_GetListSales_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaleFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductsServer).GetListSales(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Products_GetListSales_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductsServer).GetListSales(ctx, req.(*SaleFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _Products_DeleteSales_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaleID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductsServer).DeleteSales(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Products_DeleteSales_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductsServer).DeleteSales(ctx, req.(*SaleID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Products_TotalPriceOfProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompanyID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductsServer).TotalPriceOfProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Products_TotalPriceOfProducts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductsServer).TotalPriceOfProducts(ctx, req.(*CompanyID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Products_TotalSoldProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompanyID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductsServer).TotalSoldProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Products_TotalSoldProducts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductsServer).TotalSoldProducts(ctx, req.(*CompanyID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Products_TotalPurchaseProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompanyID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductsServer).TotalPurchaseProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Products_TotalPurchaseProducts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductsServer).TotalPurchaseProducts(ctx, req.(*CompanyID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Products_GetMostSoldProductsByDay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MostSoldProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductsServer).GetMostSoldProductsByDay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Products_GetMostSoldProductsByDay_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductsServer).GetMostSoldProductsByDay(ctx, req.(*MostSoldProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Products_GetTopClients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTopEntitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductsServer).GetTopClients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Products_GetTopClients_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductsServer).GetTopClients(ctx, req.(*GetTopEntitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Products_GetTopSuppliers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTopEntitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductsServer).GetTopSuppliers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Products_GetTopSuppliers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductsServer).GetTopSuppliers(ctx, req.(*GetTopEntitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Products_ServiceDesc is the grpc.ServiceDesc for Products service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Products_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "products.Products",
	HandlerType: (*ProductsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCategory",
			Handler:    _Products_CreateCategory_Handler,
		},
		{
			MethodName: "UpdateCategory",
			Handler:    _Products_UpdateCategory_Handler,
		},
		{
			MethodName: "DeleteCategory",
			Handler:    _Products_DeleteCategory_Handler,
		},
		{
			MethodName: "GetCategory",
			Handler:    _Products_GetCategory_Handler,
		},
		{
			MethodName: "GetListCategory",
			Handler:    _Products_GetListCategory_Handler,
		},
		{
			MethodName: "CreateProduct",
			Handler:    _Products_CreateProduct_Handler,
		},
		{
			MethodName: "UpdateProduct",
			Handler:    _Products_UpdateProduct_Handler,
		},
		{
			MethodName: "DeleteProduct",
			Handler:    _Products_DeleteProduct_Handler,
		},
		{
			MethodName: "GetProduct",
			Handler:    _Products_GetProduct_Handler,
		},
		{
			MethodName: "GetProductList",
			Handler:    _Products_GetProductList_Handler,
		},
		{
			MethodName: "CreatePurchase",
			Handler:    _Products_CreatePurchase_Handler,
		},
		{
			MethodName: "GetPurchase",
			Handler:    _Products_GetPurchase_Handler,
		},
		{
			MethodName: "GetListPurchase",
			Handler:    _Products_GetListPurchase_Handler,
		},
		{
			MethodName: "UpdatePurchase",
			Handler:    _Products_UpdatePurchase_Handler,
		},
		{
			MethodName: "DeletePurchase",
			Handler:    _Products_DeletePurchase_Handler,
		},
		{
			MethodName: "CalculateTotalSales",
			Handler:    _Products_CalculateTotalSales_Handler,
		},
		{
			MethodName: "CreateSales",
			Handler:    _Products_CreateSales_Handler,
		},
		{
			MethodName: "UpdateSales",
			Handler:    _Products_UpdateSales_Handler,
		},
		{
			MethodName: "GetSales",
			Handler:    _Products_GetSales_Handler,
		},
		{
			MethodName: "GetListSales",
			Handler:    _Products_GetListSales_Handler,
		},
		{
			MethodName: "DeleteSales",
			Handler:    _Products_DeleteSales_Handler,
		},
		{
			MethodName: "TotalPriceOfProducts",
			Handler:    _Products_TotalPriceOfProducts_Handler,
		},
		{
			MethodName: "TotalSoldProducts",
			Handler:    _Products_TotalSoldProducts_Handler,
		},
		{
			MethodName: "TotalPurchaseProducts",
			Handler:    _Products_TotalPurchaseProducts_Handler,
		},
		{
			MethodName: "GetMostSoldProductsByDay",
			Handler:    _Products_GetMostSoldProductsByDay_Handler,
		},
		{
			MethodName: "GetTopClients",
			Handler:    _Products_GetTopClients_Handler,
		},
		{
			MethodName: "GetTopSuppliers",
			Handler:    _Products_GetTopSuppliers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "products/products.proto",
}
